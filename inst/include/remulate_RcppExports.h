// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_remulate_RCPPEXPORTS_H_GEN_
#define RCPP_remulate_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace remulate {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("remulate", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("remulate", "_remulate_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in remulate");
            }
        }
    }

    inline arma::mat computeStatsActor(const arma::vec& int_effects, const arma::mat& rs, const arma::vec& actors, const arma::mat& edgelist, const arma::mat& adj_mat, Rcpp::List covariates, Rcpp::List interact_effects, arma::vec scaling, arma::mat statprevmat) {
        typedef SEXP(*Ptr_computeStatsActor)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_computeStatsActor p_computeStatsActor = NULL;
        if (p_computeStatsActor == NULL) {
            validateSignature("arma::mat(*computeStatsActor)(const arma::vec&,const arma::mat&,const arma::vec&,const arma::mat&,const arma::mat&,Rcpp::List,Rcpp::List,arma::vec,arma::mat)");
            p_computeStatsActor = (Ptr_computeStatsActor)R_GetCCallable("remulate", "_remulate_computeStatsActor");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_computeStatsActor(Shield<SEXP>(Rcpp::wrap(int_effects)), Shield<SEXP>(Rcpp::wrap(rs)), Shield<SEXP>(Rcpp::wrap(actors)), Shield<SEXP>(Rcpp::wrap(edgelist)), Shield<SEXP>(Rcpp::wrap(adj_mat)), Shield<SEXP>(Rcpp::wrap(covariates)), Shield<SEXP>(Rcpp::wrap(interact_effects)), Shield<SEXP>(Rcpp::wrap(scaling)), Shield<SEXP>(Rcpp::wrap(statprevmat)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat computeStatsTie(const arma::vec& int_effects, const arma::mat& rs, const arma::vec& actors, const arma::mat& edgelist, const arma::mat& adj_mat, Rcpp::List covariates, Rcpp::List interact_effects, arma::vec scaling, arma::vec mem_start, arma::vec mem_end, arma::mat statprevmat) {
        typedef SEXP(*Ptr_computeStatsTie)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_computeStatsTie p_computeStatsTie = NULL;
        if (p_computeStatsTie == NULL) {
            validateSignature("arma::mat(*computeStatsTie)(const arma::vec&,const arma::mat&,const arma::vec&,const arma::mat&,const arma::mat&,Rcpp::List,Rcpp::List,arma::vec,arma::vec,arma::vec,arma::mat)");
            p_computeStatsTie = (Ptr_computeStatsTie)R_GetCCallable("remulate", "_remulate_computeStatsTie");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_computeStatsTie(Shield<SEXP>(Rcpp::wrap(int_effects)), Shield<SEXP>(Rcpp::wrap(rs)), Shield<SEXP>(Rcpp::wrap(actors)), Shield<SEXP>(Rcpp::wrap(edgelist)), Shield<SEXP>(Rcpp::wrap(adj_mat)), Shield<SEXP>(Rcpp::wrap(covariates)), Shield<SEXP>(Rcpp::wrap(interact_effects)), Shield<SEXP>(Rcpp::wrap(scaling)), Shield<SEXP>(Rcpp::wrap(mem_start)), Shield<SEXP>(Rcpp::wrap(mem_end)), Shield<SEXP>(Rcpp::wrap(statprevmat)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

}

#endif // RCPP_remulate_RCPPEXPORTS_H_GEN_
