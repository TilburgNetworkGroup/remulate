% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/remulateActor.R
\name{remulateActor}
\alias{remulateActor}
\title{Simulate Temporal Events Network - Actor oriented model}
\usage{
remulateActor(
  rateEffects,
  choiceEffects,
  actors,
  time,
  events = NULL,
  startTime = 0,
  initial = 0,
  riskset = NULL,
  memory = c("full", "window", "brandes", "vu"),
  memoryParam = NULL
)
}
\arguments{
\item{rateEffects}{an object of type \code{formula} for specification of statistics used to simulate the network under the actor rate sub-model}

\item{choiceEffects}{an object of type \code{formula} for specification of statistics used to simulate the network under the receiver choice sub-model}

\item{actors}{Numeric or character vector of actor names.}

\item{time}{Numeric, time upto which to simulate network.}

\item{events}{[Optional] Integer, maximum number of events to simulate.}

\item{startTime}{[Optional] (default = 0) Numeric specifying the time at which to initialize the simulation}

\item{initial}{[Optional] (default = 0) Numeric or data.frame object indicating how to initialize the network. ' integer' value denotes the number of random events to sample before beginning with the data generation. data.frame with columns (time,sender,receiver), it is an edgelist of initial events following which the subsequent events are predicted.}

\item{riskset}{[Optional] \code{matrix} object wtih columns (sender, receiver) for custom risk set}

\item{memory}{[Optional] (default = full) String indicating which.
 memory type to use. "full" uses the entire event history to compute statistics, "window" memory indicates a time window in the past upto.
which occured events will be remembered for computing statistics, "window_m" memory indicates a window (number of events) in the past upto.
which occured events will be remembered for computing statistics, "decay" memory type allows for an exponential decay of past events
weighted by elapsed time.}

\item{memoryParam}{[Optional] value > 0. For memory type "window" this parameter indicates the length (in time units) of the window.
For memory type "window_m" this parameter indicates the length (in number of events) of the window. 
For memory type "decay" the memoryParam is the half-life i.e the time until an event has a weight of one half.}
}
\value{
\describe{
\item{edgelist}{A data.frame object with columns (time, sender, receiver) representing the generated event sequence.}
\item{evls}{A matrix containing the event list with columns (dyad, time), where dyad represents the index of the (sender, receiver) pair in the risk set.}
\item{rateStatistics}{An array of dimensions M x N x P, where M is the number of events, N is the number of actors, and P is the number of sender rate statistics.}
\item{choiceStatistics}{An array of dimensions M x D x Q, where M is the number of events, D is the number of dyads in the risk set, and Q is the number of receiver choice statistics.}
\item{rateParams}{A named list of rate model parameters corresponding to specified rate statistics.}
\item{choiceParams}{A named list of choice model parameters corresponding to specified choice statistics.}
\item{riskset}{A matrix with columns (sender, receiver) representing the risk set used in the simulation.}
\item{actors}{A data.frame containing the mapping of actor names provided by the user to the integer IDs used in internal computations.}
\item{density}{A numeric value indicating the density of the generated network, defined as the number of observed ties divided by N*(N-1) (where N is the number of actors).}
}
}
\description{
A function to simulate relational event data by sampling from an
actor oriented event model.
}
\details{
A list of available statistics for actor rate model. See \link{remulateActorEffects} for details on effects: 
\itemize{
 \item \code{baseline()}
 \item \code{indegreeSender()}
 \item \code{outdegreeSender()}
 \item \code{totaldegreeSender()}
 \item \code{ospSender()}
 \item \code{otpSender()}
 \item \code{send()}
 \item \code{interact()}
}

A list of available statistics for receiver choice model. See \link{remulateActorEffects} for details on effects: :
\itemize{
 \item \code{baseline()}
 \item \code{inertia()}
 \item \code{reciprocity()}
 \item \code{indegreeReceiver()}
 \item \code{outdegreeReceiver()}
 \item \code{totaldegreeReceiver()}
 \item \code{otp()}
 \item \code{itp()}
 \item \code{osp()}
 \item \code{isp()}
 \item \code{receive()}
 \item \code{dyad()}
 \item \code{same()}
 \item \code{average()}
 \item \code{difference()}
 \item \code{minimum()}
 \item \code{maximum()}
 \item \code{interact()}
}
}
\examples{
 # To generate events up to time '50' in a network of 25 actors with 
 # 200 random initial events
 
 # Exogenous attributes data.frame
 cov <- data.frame(
   id = 1:25, 
   time = rep(0, 25), 
   sex = sample(c(0,1), 25, replace = TRUE, prob = c(0.4, 0.6)), 
   age = sample(20:30, 25, replace = TRUE) 
 )
 
 # Effects specification
 rateform <- ~ remulate::baseline(-6) + 
              remulate::indegreeSender(0.01) + 
              remulate::send(0.02, variable = "age", attributes = cov) + 
              remulate::interact(0.01, indices = c(2, 3))
 
 choiceform <- ~ remulate::inertia(0.01) + 
               remulate::reciprocity(-0.03) + 
               remulate::interact(0.01, indices = c(2, 1))
 
 # Calling remulateActor
 remulate::remulateActor(
   rateform, 
   choiceform, 
   actors = 1:25, 
   time = 100, 
   initial = 200, 
   events = 500, 
 )
  
 # To predict events, given an edgelist of initial events
 initialREH <- data.frame(
   time = seq(0.5, 100, 0.5), 
   sender = sample(1:25, 200, TRUE), 
   receiver = sample(1:25, 200, TRUE)
 )
 
 remulate::remulateActor(
   rateform, 
   choiceform, 
   actors = 1:25, 
   time = 200, 
   initial = initialREH, 
   events = 500
 )
}
